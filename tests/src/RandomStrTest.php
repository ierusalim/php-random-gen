<?php

namespace ierusalim\Random;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-07 at 21:57:01.
 */
class RandomStrTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var RandomStr
     */
    protected $object;

    protected function setUp()
    {
        $this->object = new RandomStr();
    }

    public function testConstructMB()
    {
        $r = new RandomStr("一二三", true);
        $gen_str_len = 10;
        $gen_str = $r->genRandomStr($gen_str_len);
        $gen_str_arr = preg_split('//u', $gen_str, null, PREG_SPLIT_NO_EMPTY);
        $this->assertEquals($gen_str_len, count($gen_str_arr));
        $this->assertGreaterThan($gen_str_len, strlen($gen_str));
    }
    
    public function testExplodeUtf8()
    {
        $r = $this->object;
        $r->setChars([
            0 => [1, 2, 3],
            1 => "一二三",
            2 => 'abcdef'
        ], true);
        $expected_arr = [
          0=> [1, 2, 3],
          1=> ["一", "二", "三"],
          2 => 'abcdef'
        ];
        $this->assertEquals($expected_arr, $r->char_sets);
    }
    
    /**
     * @covers ierusalim\Random\RandomStr::genRandomStr
     * @todo   Implement testGenRandomStr().
     */
    public function testGenRandomStr()
    {
        $r = $this->object;
        
        $r->setChars([
                0 => $r->char_sets[0],
                1 => '',
                2 => []
            ]);
        $this->assertFalse($r->genRandomStr(10, 1));
        $this->assertFalse($r->genRandomStr(10, 2));
        
        for ($len = 0; $len < 10; $len++) {
            $bytes = $r->genRandomStr($len);
            if ($len) {
                $this->assertTrue(is_string($bytes));
                $this->assertEquals(strlen($bytes), $len);
            } else {
                $this->assertFalse($bytes);
            }
        }
        for ($len = 100; $len < 100000; $len += (int) ($len / 7)) {
            $bytes = $r->genRandomStr($len);
            $this->assertTrue(strlen($bytes) == $len);
        }
        $prev = '';
        $len = 7;
        for ($i = 0; $i < 100; $i++) {
            $bytes = $this->object->genRandomStr($len);
            $this->assertFalse($bytes === $prev);
            $prev = $bytes;
        }
    }

    /**
     * @covers ierusalim\Random\RandomStr::genRandomBytes
     * @todo   Implement testGenRandomBytes().
     */
    public function testGenRandomBytes()
    {
        for ($len = 0; $len < 100000; $len += (int) ($len / 10) + 1) {
            $bytes = $this->object->genRandomBytes($len);
            if ($len) {
                $this->assertTrue(is_string($bytes));
                $this->assertTrue(strlen($bytes) == $len);
            } else {
                $this->assertNull($bytes);
            }
        }
    }

    /**
     * @covers ierusalim\Random\RandomStr::md5RandomBytes
     * @todo   Implement testMd5RandomBytes().
     */
    public function testMd5RandomBytes()
    {
        for ($len = 0; $len < 100000; $len += $len + 1) {
            $bytes = $this->object->md5RandomBytes($len);
            if ($len) {
                $this->assertTrue(is_string($bytes));
                $this->assertTrue(strlen($bytes) == $len);
            } else {
                $this->assertTrue(!is_string($bytes));
                $this->assertNull($bytes);
            }
        }
    }

    /**
     * @covers ierusalim\Random\RandomStr::SetChars
     * @todo   Implement testSetChars().
     */
    public function testSetChars()
    {
        //test multibyte
        $gen_chars = "神會貓性少女 迪克和陰部";
        $gen_chars_len = mb_strlen($gen_chars, 'UTF-8');
        $gen_chars_arr = preg_split('//u', $gen_chars, null, PREG_SPLIT_NO_EMPTY);
        $this->assertEquals($gen_chars_len, count($gen_chars_arr));

        $this->object->setChars($gen_chars, true);
        $gen_str_len = 100;
        $gen_str = $this->object->genRandomStr($gen_str_len);
        $real_gen_str_len = mb_strlen($gen_str, 'UTF-8');
        $this->assertEquals($gen_str_len, $real_gen_str_len);

        $gen_str_arr = preg_split('//u', $gen_str, null, PREG_SPLIT_NO_EMPTY);
        $this->assertEquals($gen_str_len, count($gen_str_arr));

        $errs = 0;
        foreach ($gen_str_arr as $mb_ch) {
            if (!\in_array($mb_ch, $gen_chars_arr)) {
                $errs++;
            }
        }
        $this->assertTrue(!$errs);
        
        //test words array
        $words_arr = explode(',', ' one, two, three, four, five, six, seven');
        $this->object->setChars([$words_arr]);
        $gen_str = $this->object->genRandomStr(10);
        $gen_arr = explode(' ', $gen_str);
        $this->assertEquals(count($gen_arr), 11);
        $this->assertEquals(array_shift($gen_arr), '');
        
        foreach ($gen_arr as $k => $word) {
            if (in_array(' '.$word, $words_arr)) {
                unset($gen_arr[$k]);
            }
        }
        $this->assertEquals(count($gen_arr), 0);
    }
}
